#!/usr/bin/env bash
set -euo pipefail

# Simple Django helper for local development.
# Isolates dev workflows from production deploys.

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
MONO_DIR="$(cd "${SCRIPT_DIR}/.." && pwd)"

# Activate venv if present
if [[ -f "${MONO_DIR}/.venv/bin/activate" ]]; then
  # shellcheck disable=SC1091
  source "${MONO_DIR}/.venv/bin/activate"
fi

# Load .env if present (non-exported lines are ignored)
if [[ -f "${MONO_DIR}/.env" ]]; then
  # shellcheck disable=SC2046
  export $(grep -v '^#' "${MONO_DIR}/.env" | xargs 2>/dev/null || true)
fi

env_guard() {
  # Guard rail: avoid running against non-local DB by mistake
  local host="${RBS_PG_HOST:-localhost}"
  local debug="${DEBUG:-True}"
  if [[ "${debug}" != "True" ]] || [[ "${host}" != "localhost" && "${host}" != "127.0.0.1" ]]; then
    echo "⚠️  Refusing to run outside local dev (DEBUG=True, HOST=localhost required)." >&2
    echo "Set DEBUG=True and RBS_PG_HOST=localhost in apps/backend/monolith/.env for development." >&2
    echo "For production, use your CI/CD (GitOps/ArgoCD) pipeline." >&2
    exit 1
  fi
}

usage() {
  cat <<EOF
dj - Django helper for local development

Usage:
  dj [manage.py args...]                 # default passthrough

Shortcuts:
  dj runserver                           # run local server
  dj shell                               # open Django shell
  dj makemigrations [app]                # create migrations
  dj migrate                             # apply migrations
  dj test                                # run model tests (api)

Dev DB (Docker):
  dj db:up                               # start local Postgres (docker compose)
  dj db:down                             # stop local Postgres
  dj db:destroy                          # remove local Postgres + volume

Notes:
  - This script is for local dev only. Production deploys should go via GitOps/CI.
  - Requires apps/backend/monolith/.env pointing to localhost Postgres.
EOF
}

main() {
  cd "${MONO_DIR}"

  if [[ $# -eq 0 ]] || [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
    usage
    exit 0
  fi

  case "${1}" in
    db:up)
      env_guard
      make -s -C "${MONO_DIR}/.." dev-db-up
      ;;
    db:down)
      env_guard
      make -s -C "${MONO_DIR}/.." dev-db-down
      ;;
    db:destroy)
      env_guard
      make -s -C "${MONO_DIR}/.." dev-db-destroy
      ;;
    runserver)
      env_guard
      python manage.py runserver
      ;;
    shell)
      env_guard
      python manage.py shell
      ;;
    makemigrations)
      env_guard
      shift
      python manage.py makemigrations "$@"
      ;;
    migrate)
      env_guard
      python manage.py migrate
      ;;
    test)
      env_guard
      python manage.py test api.tests.test_models -v 2
      ;;
    *)
      # passthrough to manage.py
      env_guard
      python manage.py "$@"
      ;;
  esac
}

main "$@"
